; ModuleID = 'prog.opt.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

@.str = private constant [8 x i8] c"in_data\00"
@.str1 = private constant [9 x i8] c"out_data\00"

define float @fpmul32f(float %x, float %y) nounwind readnone {
  %1 = fmul float %x, %y
  ret float %1
}

define float @fpadd32f(float %x, float %y) nounwind readnone {
  %1 = fadd float %x, %y
  ret float %1
}

define float @fpsub32f(float %x, float %y) nounwind readnone {
  %1 = fsub float %x, %y
  ret float %1
}

define i32 @fpadd32fi(i32 %x, i32 %y) nounwind readnone {
  %1 = add i32 %y, %x
  ret i32 %1
}

define i32 @fpsub32fi(i32 %x, i32 %y) nounwind readnone {
  %1 = sub i32 %x, %y
  ret i32 %1
}

define i32 @udiv32(i32 %dividend, i32 %divisor) nounwind readnone {
; <label>:0
  switch i32 %divisor, label %2 [
    i32 0, label %.loopexit
    i32 1, label %1
  ]

; <label>:1                                       ; preds = %0
  br label %UnifiedReturnBlock

; <label>:2                                       ; preds = %0
  %3 = icmp ugt i32 %divisor, %dividend
  %4 = icmp ult i32 %dividend, %divisor
  %or.cond = or i1 %3, %4
  br i1 %or.cond, label %.loopexit, label %bb.nph7.preheader

bb.nph7.preheader:                                ; preds = %2
  br label %bb.nph7

bb.nph7:                                          ; preds = %._crit_edge, %bb.nph7.preheader
  %.016 = phi i32 [ %11, %._crit_edge ], [ %dividend, %bb.nph7.preheader ]
  %quotient.05 = phi i32 [ %10, %._crit_edge ], [ 0, %bb.nph7.preheader ]
  %5 = lshr i32 %.016, 1
  %6 = icmp ugt i32 %5, %divisor
  br i1 %6, label %bb.nph.preheader, label %._crit_edge

bb.nph.preheader:                                 ; preds = %bb.nph7
  br label %bb.nph

bb.nph:                                           ; preds = %bb.nph, %bb.nph.preheader
  %shifted_divisor.03 = phi i32 [ %7, %bb.nph ], [ %divisor, %bb.nph.preheader ]
  %curr_quotient.02 = phi i32 [ %8, %bb.nph ], [ 1, %bb.nph.preheader ]
  %7 = shl i32 %shifted_divisor.03, 1
  %8 = shl i32 %curr_quotient.02, 1
  %9 = icmp ult i32 %7, %5
  br i1 %9, label %bb.nph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %bb.nph
  %.lcssa1 = phi i32 [ %8, %bb.nph ]
  %.lcssa = phi i32 [ %7, %bb.nph ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %bb.nph7
  %shifted_divisor.0.lcssa = phi i32 [ %divisor, %bb.nph7 ], [ %.lcssa, %._crit_edge.loopexit ]
  %curr_quotient.0.lcssa = phi i32 [ 1, %bb.nph7 ], [ %.lcssa1, %._crit_edge.loopexit ]
  %10 = add i32 %curr_quotient.0.lcssa, %quotient.05
  %11 = sub i32 %.016, %shifted_divisor.0.lcssa
  %12 = icmp ult i32 %11, %divisor
  br i1 %12, label %.loopexit.loopexit, label %bb.nph7

.loopexit.loopexit:                               ; preds = %._crit_edge
  %.lcssa2 = phi i32 [ %10, %._crit_edge ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %2, %0
  %.0 = phi i32 [ -1, %0 ], [ 0, %2 ], [ %.lcssa2, %.loopexit.loopexit ]
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %.loopexit, %1
  %UnifiedRetVal = phi i32 [ %dividend, %1 ], [ %.0, %.loopexit ]
  ret i32 %UnifiedRetVal
}

define float @fdiv32(float %a, float %b) nounwind readnone {
  %tmp10 = bitcast float %a to i32
  %tmp6 = bitcast float %b to i32
  %1 = fcmp oeq float %a, 0.000000e+00
  br i1 %1, label %37, label %2

; <label>:2                                       ; preds = %0
  %3 = lshr i32 %tmp10, 23
  %4 = and i32 %3, 255
  %5 = lshr i32 %tmp6, 23
  %6 = and i32 %5, 255
  %7 = shl i32 %tmp10, 7
  %8 = and i32 %7, 1073741696
  %9 = or i32 %8, 1073741824
  %10 = lshr i32 %tmp6, 7
  %11 = and i32 %10, 65535
  %12 = or i32 %11, 65536
  %13 = xor i32 %tmp6, %tmp10
  %14 = and i32 %13, -2147483648
  %15 = sub i32 %4, %6
  switch i32 %12, label %bb.nph7.i.preheader [
    i32 0, label %.loopexit.i
    i32 1, label %udiv32.exit.preheader
  ]

bb.nph7.i.preheader:                              ; preds = %2
  br label %bb.nph7.i

bb.nph7.i:                                        ; preds = %._crit_edge.i, %bb.nph7.i.preheader
  %.016.i = phi i32 [ %22, %._crit_edge.i ], [ %9, %bb.nph7.i.preheader ]
  %quotient.05.i = phi i32 [ %21, %._crit_edge.i ], [ 0, %bb.nph7.i.preheader ]
  %16 = lshr i32 %.016.i, 1
  %17 = icmp ugt i32 %16, %12
  br i1 %17, label %bb.nph.i.preheader, label %._crit_edge.i

bb.nph.i.preheader:                               ; preds = %bb.nph7.i
  br label %bb.nph.i

bb.nph.i:                                         ; preds = %bb.nph.i, %bb.nph.i.preheader
  %shifted_divisor.03.i = phi i32 [ %18, %bb.nph.i ], [ %12, %bb.nph.i.preheader ]
  %curr_quotient.02.i = phi i32 [ %19, %bb.nph.i ], [ 1, %bb.nph.i.preheader ]
  %18 = shl i32 %shifted_divisor.03.i, 1
  %19 = shl i32 %curr_quotient.02.i, 1
  %20 = icmp ult i32 %18, %16
  br i1 %20, label %bb.nph.i, label %._crit_edge.i.loopexit

._crit_edge.i.loopexit:                           ; preds = %bb.nph.i
  %.lcssa2 = phi i32 [ %19, %bb.nph.i ]
  %.lcssa1 = phi i32 [ %18, %bb.nph.i ]
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %bb.nph7.i
  %shifted_divisor.0.lcssa.i = phi i32 [ %12, %bb.nph7.i ], [ %.lcssa1, %._crit_edge.i.loopexit ]
  %curr_quotient.0.lcssa.i = phi i32 [ 1, %bb.nph7.i ], [ %.lcssa2, %._crit_edge.i.loopexit ]
  %21 = add i32 %curr_quotient.0.lcssa.i, %quotient.05.i
  %22 = sub i32 %.016.i, %shifted_divisor.0.lcssa.i
  %23 = icmp ult i32 %22, %12
  br i1 %23, label %.loopexit.i.loopexit, label %bb.nph7.i

.loopexit.i.loopexit:                             ; preds = %._crit_edge.i
  %.lcssa3 = phi i32 [ %21, %._crit_edge.i ]
  br label %.loopexit.i

.loopexit.i:                                      ; preds = %.loopexit.i.loopexit, %2
  %.0.i = phi i32 [ -1, %2 ], [ %.lcssa3, %.loopexit.i.loopexit ]
  br label %udiv32.exit.preheader

udiv32.exit.preheader:                            ; preds = %.loopexit.i, %2
  %temp.0.ph = phi i32 [ %.0.i, %.loopexit.i ], [ %9, %2 ]
  %24 = and i32 %temp.0.ph, 8388608
  %25 = icmp eq i32 %24, 0
  %26 = icmp ne i32 %temp.0.ph, 0
  %or.cond11 = and i1 %25, %26
  br i1 %or.cond11, label %bb.nph, label %.critedge

bb.nph:                                           ; preds = %udiv32.exit.preheader
  %tmp21 = add i32 %4, -1
  br label %udiv32.exit

udiv32.exit:                                      ; preds = %udiv32.exit, %bb.nph
  %27 = phi i32 [ 0, %bb.nph ], [ %indvar.next, %udiv32.exit ]
  %temp.012 = phi i32 [ %temp.0.ph, %bb.nph ], [ %28, %udiv32.exit ]
  %28 = shl i32 %temp.012, 1
  %29 = and i32 %28, 8388608
  %30 = icmp eq i32 %29, 0
  %31 = icmp ne i32 %28, 0
  %or.cond = and i1 %30, %31
  %indvar.next = add i32 %27, 1
  br i1 %or.cond, label %udiv32.exit, label %udiv32.exit..critedge_crit_edge

udiv32.exit..critedge_crit_edge:                  ; preds = %udiv32.exit
  %.lcssa = phi i32 [ %28, %udiv32.exit ]
  %indvar.lcssa = phi i32 [ %27, %udiv32.exit ]
  %tmp25 = sub i32 %tmp21, %6
  %tmp26 = sub i32 %tmp25, %indvar.lcssa
  br label %.critedge

.critedge:                                        ; preds = %udiv32.exit..critedge_crit_edge, %udiv32.exit.preheader
  %exp.0.lcssa = phi i32 [ %tmp26, %udiv32.exit..critedge_crit_edge ], [ %15, %udiv32.exit.preheader ]
  %temp.0.lcssa = phi i32 [ %.lcssa, %udiv32.exit..critedge_crit_edge ], [ %temp.0.ph, %udiv32.exit.preheader ]
  %32 = and i32 %temp.0.lcssa, 8388607
  %33 = shl i32 %exp.0.lcssa, 23
  %34 = add i32 %33, 1140850688
  %35 = or i32 %32, %14
  %36 = or i32 %35, %34
  %tmp3 = bitcast i32 %36 to float
  br label %UnifiedReturnBlock

; <label>:37                                      ; preds = %0
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %37, %.critedge
  %UnifiedRetVal = phi float [ %tmp3, %.critedge ], [ 0.000000e+00, %37 ]
  ret float %UnifiedRetVal
}

define float @rotor_flux_calc(float %id, float %flux_rotor_prev) nounwind readnone {
  %1 = fmul float %flux_rotor_prev, 0x3FEFFC1160000000
  %2 = fmul float %id, 0x3F3977C2A0000000
  %3 = fadd float %2, %1
  ret float %3
}

define float @omega_calc(float %iq, float %flux_rotor) nounwind readnone {
  %1 = fmul float %iq, 0x401F299A00000000
  %tmp10.i = bitcast float %1 to i32
  %tmp6.i = bitcast float %flux_rotor to i32
  %2 = fcmp oeq float %1, 0.000000e+00
  br i1 %2, label %fdiv32.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = lshr i32 %tmp10.i, 23
  %5 = and i32 %4, 255
  %6 = lshr i32 %tmp6.i, 23
  %7 = and i32 %6, 255
  %8 = shl i32 %tmp10.i, 7
  %9 = and i32 %8, 1073741696
  %10 = or i32 %9, 1073741824
  %11 = lshr i32 %tmp6.i, 7
  %12 = and i32 %11, 65535
  %13 = or i32 %12, 65536
  %14 = xor i32 %tmp6.i, %tmp10.i
  %15 = and i32 %14, -2147483648
  %16 = sub i32 %5, %7
  switch i32 %13, label %bb.nph7.i.i.preheader [
    i32 0, label %.loopexit.i.i
    i32 1, label %udiv32.exit.preheader.i
  ]

bb.nph7.i.i.preheader:                            ; preds = %3
  br label %bb.nph7.i.i

bb.nph7.i.i:                                      ; preds = %._crit_edge.i.i, %bb.nph7.i.i.preheader
  %.016.i.i = phi i32 [ %23, %._crit_edge.i.i ], [ %10, %bb.nph7.i.i.preheader ]
  %quotient.05.i.i = phi i32 [ %22, %._crit_edge.i.i ], [ 0, %bb.nph7.i.i.preheader ]
  %17 = lshr i32 %.016.i.i, 1
  %18 = icmp ugt i32 %17, %13
  br i1 %18, label %bb.nph.i.i.preheader, label %._crit_edge.i.i

bb.nph.i.i.preheader:                             ; preds = %bb.nph7.i.i
  br label %bb.nph.i.i

bb.nph.i.i:                                       ; preds = %bb.nph.i.i, %bb.nph.i.i.preheader
  %shifted_divisor.03.i.i = phi i32 [ %19, %bb.nph.i.i ], [ %13, %bb.nph.i.i.preheader ]
  %curr_quotient.02.i.i = phi i32 [ %20, %bb.nph.i.i ], [ 1, %bb.nph.i.i.preheader ]
  %19 = shl i32 %shifted_divisor.03.i.i, 1
  %20 = shl i32 %curr_quotient.02.i.i, 1
  %21 = icmp ult i32 %19, %17
  br i1 %21, label %bb.nph.i.i, label %._crit_edge.i.i.loopexit

._crit_edge.i.i.loopexit:                         ; preds = %bb.nph.i.i
  %.lcssa3 = phi i32 [ %20, %bb.nph.i.i ]
  %.lcssa2 = phi i32 [ %19, %bb.nph.i.i ]
  br label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %._crit_edge.i.i.loopexit, %bb.nph7.i.i
  %shifted_divisor.0.lcssa.i.i = phi i32 [ %13, %bb.nph7.i.i ], [ %.lcssa2, %._crit_edge.i.i.loopexit ]
  %curr_quotient.0.lcssa.i.i = phi i32 [ 1, %bb.nph7.i.i ], [ %.lcssa3, %._crit_edge.i.i.loopexit ]
  %22 = add i32 %curr_quotient.0.lcssa.i.i, %quotient.05.i.i
  %23 = sub i32 %.016.i.i, %shifted_divisor.0.lcssa.i.i
  %24 = icmp ult i32 %23, %13
  br i1 %24, label %.loopexit.i.i.loopexit, label %bb.nph7.i.i

.loopexit.i.i.loopexit:                           ; preds = %._crit_edge.i.i
  %.lcssa4 = phi i32 [ %22, %._crit_edge.i.i ]
  br label %.loopexit.i.i

.loopexit.i.i:                                    ; preds = %.loopexit.i.i.loopexit, %3
  %.0.i.i = phi i32 [ -1, %3 ], [ %.lcssa4, %.loopexit.i.i.loopexit ]
  br label %udiv32.exit.preheader.i

udiv32.exit.preheader.i:                          ; preds = %.loopexit.i.i, %3
  %temp.0.ph.i = phi i32 [ %.0.i.i, %.loopexit.i.i ], [ %10, %3 ]
  %25 = and i32 %temp.0.ph.i, 8388608
  %26 = icmp eq i32 %25, 0
  %27 = icmp ne i32 %temp.0.ph.i, 0
  %or.cond11.i = and i1 %26, %27
  br i1 %or.cond11.i, label %udiv32.exit.i.preheader, label %.critedge.i

udiv32.exit.i.preheader:                          ; preds = %udiv32.exit.preheader.i
  br label %udiv32.exit.i

udiv32.exit.i:                                    ; preds = %udiv32.exit.i, %udiv32.exit.i.preheader
  %28 = phi i32 [ %indvar.next.i, %udiv32.exit.i ], [ 0, %udiv32.exit.i.preheader ]
  %temp.012.i = phi i32 [ %29, %udiv32.exit.i ], [ %temp.0.ph.i, %udiv32.exit.i.preheader ]
  %29 = shl i32 %temp.012.i, 1
  %30 = and i32 %29, 8388608
  %31 = icmp eq i32 %30, 0
  %32 = icmp ne i32 %29, 0
  %or.cond.i = and i1 %31, %32
  %indvar.next.i = add i32 %28, 1
  br i1 %or.cond.i, label %udiv32.exit.i, label %udiv32.exit..critedge_crit_edge.i

udiv32.exit..critedge_crit_edge.i:                ; preds = %udiv32.exit.i
  %.lcssa1 = phi i32 [ %29, %udiv32.exit.i ]
  %.lcssa = phi i32 [ %28, %udiv32.exit.i ]
  %.not = or i32 %6, -256
  %tmp21.i = xor i32 %.not, 255
  %tmp25.i = add i32 %tmp21.i, %5
  %tmp26.i = sub i32 %tmp25.i, %.lcssa
  br label %.critedge.i

.critedge.i:                                      ; preds = %udiv32.exit..critedge_crit_edge.i, %udiv32.exit.preheader.i
  %exp.0.lcssa.i = phi i32 [ %tmp26.i, %udiv32.exit..critedge_crit_edge.i ], [ %16, %udiv32.exit.preheader.i ]
  %temp.0.lcssa.i = phi i32 [ %.lcssa1, %udiv32.exit..critedge_crit_edge.i ], [ %temp.0.ph.i, %udiv32.exit.preheader.i ]
  %33 = and i32 %temp.0.lcssa.i, 8388607
  %34 = shl i32 %exp.0.lcssa.i, 23
  %35 = add i32 %34, 1140850688
  %36 = or i32 %35, %15
  %37 = or i32 %36, %33
  %tmp3.i = bitcast i32 %37 to float
  br label %UnifiedReturnBlock

fdiv32.exit:                                      ; preds = %0
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %fdiv32.exit, %.critedge.i
  %UnifiedRetVal = phi float [ %tmp3.i, %.critedge.i ], [ 0.000000e+00, %fdiv32.exit ]
  ret float %UnifiedRetVal
}

define float @theta_calc(float %omega_r, float %omega_m, float %theta_prev, float %del_t) nounwind readnone {
  %1 = fadd float %omega_r, %omega_m
  %2 = fmul float %1, %del_t
  %3 = fadd float %2, %theta_prev
  ret float %3
}

define float @iq_err_calc(float %torque_ref, float %flux_rotor) nounwind readnone {
  %1 = fmul float %torque_ref, 0x3FD62E3540000000
  %tmp10.i = bitcast float %1 to i32
  %tmp6.i = bitcast float %flux_rotor to i32
  %2 = fcmp oeq float %1, 0.000000e+00
  br i1 %2, label %fdiv32.exit, label %3

; <label>:3                                       ; preds = %0
  %4 = lshr i32 %tmp10.i, 23
  %5 = and i32 %4, 255
  %6 = lshr i32 %tmp6.i, 23
  %7 = and i32 %6, 255
  %8 = shl i32 %tmp10.i, 7
  %9 = and i32 %8, 1073741696
  %10 = or i32 %9, 1073741824
  %11 = lshr i32 %tmp6.i, 7
  %12 = and i32 %11, 65535
  %13 = or i32 %12, 65536
  %14 = xor i32 %tmp6.i, %tmp10.i
  %15 = and i32 %14, -2147483648
  %16 = sub i32 %5, %7
  switch i32 %13, label %bb.nph7.i.i.preheader [
    i32 0, label %.loopexit.i.i
    i32 1, label %udiv32.exit.preheader.i
  ]

bb.nph7.i.i.preheader:                            ; preds = %3
  br label %bb.nph7.i.i

bb.nph7.i.i:                                      ; preds = %._crit_edge.i.i, %bb.nph7.i.i.preheader
  %.016.i.i = phi i32 [ %23, %._crit_edge.i.i ], [ %10, %bb.nph7.i.i.preheader ]
  %quotient.05.i.i = phi i32 [ %22, %._crit_edge.i.i ], [ 0, %bb.nph7.i.i.preheader ]
  %17 = lshr i32 %.016.i.i, 1
  %18 = icmp ugt i32 %17, %13
  br i1 %18, label %bb.nph.i.i.preheader, label %._crit_edge.i.i

bb.nph.i.i.preheader:                             ; preds = %bb.nph7.i.i
  br label %bb.nph.i.i

bb.nph.i.i:                                       ; preds = %bb.nph.i.i, %bb.nph.i.i.preheader
  %shifted_divisor.03.i.i = phi i32 [ %19, %bb.nph.i.i ], [ %13, %bb.nph.i.i.preheader ]
  %curr_quotient.02.i.i = phi i32 [ %20, %bb.nph.i.i ], [ 1, %bb.nph.i.i.preheader ]
  %19 = shl i32 %shifted_divisor.03.i.i, 1
  %20 = shl i32 %curr_quotient.02.i.i, 1
  %21 = icmp ult i32 %19, %17
  br i1 %21, label %bb.nph.i.i, label %._crit_edge.i.i.loopexit

._crit_edge.i.i.loopexit:                         ; preds = %bb.nph.i.i
  %.lcssa3 = phi i32 [ %20, %bb.nph.i.i ]
  %.lcssa2 = phi i32 [ %19, %bb.nph.i.i ]
  br label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %._crit_edge.i.i.loopexit, %bb.nph7.i.i
  %shifted_divisor.0.lcssa.i.i = phi i32 [ %13, %bb.nph7.i.i ], [ %.lcssa2, %._crit_edge.i.i.loopexit ]
  %curr_quotient.0.lcssa.i.i = phi i32 [ 1, %bb.nph7.i.i ], [ %.lcssa3, %._crit_edge.i.i.loopexit ]
  %22 = add i32 %curr_quotient.0.lcssa.i.i, %quotient.05.i.i
  %23 = sub i32 %.016.i.i, %shifted_divisor.0.lcssa.i.i
  %24 = icmp ult i32 %23, %13
  br i1 %24, label %.loopexit.i.i.loopexit, label %bb.nph7.i.i

.loopexit.i.i.loopexit:                           ; preds = %._crit_edge.i.i
  %.lcssa4 = phi i32 [ %22, %._crit_edge.i.i ]
  br label %.loopexit.i.i

.loopexit.i.i:                                    ; preds = %.loopexit.i.i.loopexit, %3
  %.0.i.i = phi i32 [ -1, %3 ], [ %.lcssa4, %.loopexit.i.i.loopexit ]
  br label %udiv32.exit.preheader.i

udiv32.exit.preheader.i:                          ; preds = %.loopexit.i.i, %3
  %temp.0.ph.i = phi i32 [ %.0.i.i, %.loopexit.i.i ], [ %10, %3 ]
  %25 = and i32 %temp.0.ph.i, 8388608
  %26 = icmp eq i32 %25, 0
  %27 = icmp ne i32 %temp.0.ph.i, 0
  %or.cond11.i = and i1 %26, %27
  br i1 %or.cond11.i, label %udiv32.exit.i.preheader, label %.critedge.i

udiv32.exit.i.preheader:                          ; preds = %udiv32.exit.preheader.i
  br label %udiv32.exit.i

udiv32.exit.i:                                    ; preds = %udiv32.exit.i, %udiv32.exit.i.preheader
  %28 = phi i32 [ %indvar.next.i, %udiv32.exit.i ], [ 0, %udiv32.exit.i.preheader ]
  %temp.012.i = phi i32 [ %29, %udiv32.exit.i ], [ %temp.0.ph.i, %udiv32.exit.i.preheader ]
  %29 = shl i32 %temp.012.i, 1
  %30 = and i32 %29, 8388608
  %31 = icmp eq i32 %30, 0
  %32 = icmp ne i32 %29, 0
  %or.cond.i = and i1 %31, %32
  %indvar.next.i = add i32 %28, 1
  br i1 %or.cond.i, label %udiv32.exit.i, label %udiv32.exit..critedge_crit_edge.i

udiv32.exit..critedge_crit_edge.i:                ; preds = %udiv32.exit.i
  %.lcssa1 = phi i32 [ %29, %udiv32.exit.i ]
  %.lcssa = phi i32 [ %28, %udiv32.exit.i ]
  %.not = or i32 %6, -256
  %tmp21.i = xor i32 %.not, 255
  %tmp25.i = add i32 %tmp21.i, %5
  %tmp26.i = sub i32 %tmp25.i, %.lcssa
  br label %.critedge.i

.critedge.i:                                      ; preds = %udiv32.exit..critedge_crit_edge.i, %udiv32.exit.preheader.i
  %exp.0.lcssa.i = phi i32 [ %tmp26.i, %udiv32.exit..critedge_crit_edge.i ], [ %16, %udiv32.exit.preheader.i ]
  %temp.0.lcssa.i = phi i32 [ %.lcssa1, %udiv32.exit..critedge_crit_edge.i ], [ %temp.0.ph.i, %udiv32.exit.preheader.i ]
  %33 = and i32 %temp.0.lcssa.i, 8388607
  %34 = shl i32 %exp.0.lcssa.i, 23
  %35 = add i32 %34, 1140850688
  %36 = or i32 %35, %15
  %37 = or i32 %36, %33
  %tmp3.i = bitcast i32 %37 to float
  br label %UnifiedReturnBlock

fdiv32.exit:                                      ; preds = %0
  br label %UnifiedReturnBlock

UnifiedReturnBlock:                               ; preds = %fdiv32.exit, %.critedge.i
  %UnifiedRetVal = phi float [ %tmp3.i, %.critedge.i ], [ 0.000000e+00, %fdiv32.exit ]
  ret float %UnifiedRetVal
}

define void @vector_control_daemon() noreturn nounwind {
; <label>:0
  br label %1

; <label>:1                                       ; preds = %fdiv32.exit, %0
  %flux_rotor_lpf_prev.0 = phi float [ 0.000000e+00, %0 ], [ %phitmp33, %fdiv32.exit ]
  %int_flux_err_temp_2.0 = phi float [ 0.000000e+00, %0 ], [ %127, %fdiv32.exit ]
  %speed_err_prev.0 = phi float [ 0.000000e+00, %0 ], [ %26, %fdiv32.exit ]
  %theta_prev.0 = phi float [ 0.000000e+00, %0 ], [ %85, %fdiv32.exit ]
  %flux_rotor_prev.0 = phi float [ 0.000000e+00, %0 ], [ %phitmp31, %fdiv32.exit ]
  %spd_lpf_prev.0 = phi float [ 0.000000e+00, %0 ], [ %phitmp, %fdiv32.exit ]
  %int_speed_err_prev.0 = phi float [ 0.000000e+00, %0 ], [ %29, %fdiv32.exit ]
  %speed_ref.1 = phi float [ 0.000000e+00, %0 ], [ %speed_ref.0, %fdiv32.exit ]
  %2 = getelementptr [8 x i8]* @.str, i64 0, i64 0
  %3 = tail call float @read_float32(i8* %2) nounwind
  %4 = getelementptr [8 x i8]* @.str, i64 0, i64 0
  %5 = tail call float @read_float32(i8* %4) nounwind
  %6 = getelementptr [8 x i8]* @.str, i64 0, i64 0
  %7 = tail call float @read_float32(i8* %6) nounwind
  %8 = getelementptr [8 x i8]* @.str, i64 0, i64 0
  %9 = tail call float @read_float32(i8* %8) nounwind
  %10 = getelementptr [8 x i8]* @.str, i64 0, i64 0
  %11 = tail call float @read_float32(i8* %10) nounwind
  %12 = fcmp olt float %speed_ref.1, %9
  br i1 %12, label %13, label %17

; <label>:13                                      ; preds = %1
  %14 = fpext float %speed_ref.1 to double
  %15 = fadd double %14, 5.000000e-02
  %16 = fptrunc double %15 to float
  br label %23

; <label>:17                                      ; preds = %1
  %18 = fcmp ogt float %speed_ref.1, %9
  br i1 %18, label %19, label %23

; <label>:19                                      ; preds = %17
  %20 = fpext float %speed_ref.1 to double
  %21 = fadd double %20, -5.000000e-02
  %22 = fptrunc double %21 to float
  br label %23

; <label>:23                                      ; preds = %19, %17, %13
  %speed_ref.0 = phi float [ %16, %13 ], [ %22, %19 ], [ %speed_ref.1, %17 ]
  %24 = fmul float %7, 0x3FE6666660000000
  %25 = fadd float %24, %spd_lpf_prev.0
  %26 = fsub float %speed_ref.0, %25
  %27 = fadd float %26, %speed_err_prev.0
  %28 = fmul float %27, 0x3F30624DE0000000
  %29 = fadd float %28, %int_speed_err_prev.0
  %30 = fpext float %29 to double
  %31 = fcmp olt double %30, -1.000000e+01
  br i1 %31, label %35, label %32

; <label>:32                                      ; preds = %23
  %33 = fcmp ogt double %30, 1.000000e+01
  br i1 %33, label %35, label %34

; <label>:34                                      ; preds = %32
  br label %35

; <label>:35                                      ; preds = %34, %32, %23
  %int_speed_err.0 = phi float [ %29, %34 ], [ -1.000000e+01, %23 ], [ 1.000000e+01, %32 ]
  %36 = fmul float %26, 5.000000e+00
  %37 = fadd float %int_speed_err.0, %36
  %38 = fcmp olt float %37, -2.000000e+01
  br i1 %38, label %42, label %39

; <label>:39                                      ; preds = %35
  %40 = fcmp ogt float %37, 2.000000e+01
  br i1 %40, label %42, label %41

; <label>:41                                      ; preds = %39
  %phitmp32 = fmul float %37, 0x3FD62E3540000000
  br label %42

; <label>:42                                      ; preds = %41, %39, %35
  %torque_ref.0 = phi float [ %phitmp32, %41 ], [ 0xC01BB9C280000000, %35 ], [ 0x401BB9C280000000, %39 ]
  %43 = fmul float %3, 0x3F3977C2A0000000
  %44 = fadd float %43, %flux_rotor_prev.0
  %45 = fmul float %5, 0x401F299A00000000
  %tmp10.i.i1 = bitcast float %45 to i32
  %tmp6.i.i2 = bitcast float %44 to i32
  %46 = fcmp oeq float %45, 0.000000e+00
  br i1 %46, label %omega_calc.exit, label %47

; <label>:47                                      ; preds = %42
  %48 = lshr i32 %tmp10.i.i1, 23
  %49 = and i32 %48, 255
  %50 = lshr i32 %tmp6.i.i2, 23
  %51 = and i32 %50, 255
  %52 = shl i32 %tmp10.i.i1, 7
  %53 = and i32 %52, 1073741696
  %54 = or i32 %53, 1073741824
  %55 = lshr i32 %tmp6.i.i2, 7
  %56 = and i32 %55, 65535
  %57 = or i32 %56, 65536
  %58 = xor i32 %tmp6.i.i2, %tmp10.i.i1
  %59 = and i32 %58, -2147483648
  %60 = sub i32 %49, %51
  switch i32 %57, label %bb.nph7.i.i.i5.preheader [
    i32 0, label %.loopexit.i.i.i13
    i32 1, label %udiv32.exit.preheader.i.i16
  ]

bb.nph7.i.i.i5.preheader:                         ; preds = %47
  br label %bb.nph7.i.i.i5

bb.nph7.i.i.i5:                                   ; preds = %._crit_edge.i.i.i11, %bb.nph7.i.i.i5.preheader
  %.016.i.i.i3 = phi i32 [ %67, %._crit_edge.i.i.i11 ], [ %54, %bb.nph7.i.i.i5.preheader ]
  %quotient.05.i.i.i4 = phi i32 [ %66, %._crit_edge.i.i.i11 ], [ 0, %bb.nph7.i.i.i5.preheader ]
  %61 = lshr i32 %.016.i.i.i3, 1
  %62 = icmp ugt i32 %61, %57
  br i1 %62, label %bb.nph.i.i.i8.preheader, label %._crit_edge.i.i.i11

bb.nph.i.i.i8.preheader:                          ; preds = %bb.nph7.i.i.i5
  br label %bb.nph.i.i.i8

bb.nph.i.i.i8:                                    ; preds = %bb.nph.i.i.i8, %bb.nph.i.i.i8.preheader
  %shifted_divisor.03.i.i.i6 = phi i32 [ %63, %bb.nph.i.i.i8 ], [ %57, %bb.nph.i.i.i8.preheader ]
  %curr_quotient.02.i.i.i7 = phi i32 [ %64, %bb.nph.i.i.i8 ], [ 1, %bb.nph.i.i.i8.preheader ]
  %63 = shl i32 %shifted_divisor.03.i.i.i6, 1
  %64 = shl i32 %curr_quotient.02.i.i.i7, 1
  %65 = icmp ult i32 %63, %61
  br i1 %65, label %bb.nph.i.i.i8, label %._crit_edge.i.i.i11.loopexit

._crit_edge.i.i.i11.loopexit:                     ; preds = %bb.nph.i.i.i8
  %.lcssa13 = phi i32 [ %64, %bb.nph.i.i.i8 ]
  %.lcssa12 = phi i32 [ %63, %bb.nph.i.i.i8 ]
  br label %._crit_edge.i.i.i11

._crit_edge.i.i.i11:                              ; preds = %._crit_edge.i.i.i11.loopexit, %bb.nph7.i.i.i5
  %shifted_divisor.0.lcssa.i.i.i9 = phi i32 [ %57, %bb.nph7.i.i.i5 ], [ %.lcssa12, %._crit_edge.i.i.i11.loopexit ]
  %curr_quotient.0.lcssa.i.i.i10 = phi i32 [ 1, %bb.nph7.i.i.i5 ], [ %.lcssa13, %._crit_edge.i.i.i11.loopexit ]
  %66 = add i32 %curr_quotient.0.lcssa.i.i.i10, %quotient.05.i.i.i4
  %67 = sub i32 %.016.i.i.i3, %shifted_divisor.0.lcssa.i.i.i9
  %68 = icmp ult i32 %67, %57
  br i1 %68, label %.loopexit.i.i.i13.loopexit, label %bb.nph7.i.i.i5

.loopexit.i.i.i13.loopexit:                       ; preds = %._crit_edge.i.i.i11
  %.lcssa14 = phi i32 [ %66, %._crit_edge.i.i.i11 ]
  br label %.loopexit.i.i.i13

.loopexit.i.i.i13:                                ; preds = %.loopexit.i.i.i13.loopexit, %47
  %.0.i.i.i12 = phi i32 [ -1, %47 ], [ %.lcssa14, %.loopexit.i.i.i13.loopexit ]
  br label %udiv32.exit.preheader.i.i16

udiv32.exit.preheader.i.i16:                      ; preds = %.loopexit.i.i.i13, %47
  %temp.0.ph.i.i14 = phi i32 [ %.0.i.i.i12, %.loopexit.i.i.i13 ], [ %54, %47 ]
  %69 = and i32 %temp.0.ph.i.i14, 8388608
  %70 = icmp eq i32 %69, 0
  %71 = icmp ne i32 %temp.0.ph.i.i14, 0
  %or.cond11.i.i15 = and i1 %70, %71
  br i1 %or.cond11.i.i15, label %udiv32.exit.i.i20.preheader, label %.critedge.i.i29

udiv32.exit.i.i20.preheader:                      ; preds = %udiv32.exit.preheader.i.i16
  br label %udiv32.exit.i.i20

udiv32.exit.i.i20:                                ; preds = %udiv32.exit.i.i20, %udiv32.exit.i.i20.preheader
  %72 = phi i32 [ %indvar.next.i.i19, %udiv32.exit.i.i20 ], [ 0, %udiv32.exit.i.i20.preheader ]
  %temp.012.i.i17 = phi i32 [ %73, %udiv32.exit.i.i20 ], [ %temp.0.ph.i.i14, %udiv32.exit.i.i20.preheader ]
  %73 = shl i32 %temp.012.i.i17, 1
  %74 = and i32 %73, 8388608
  %75 = icmp eq i32 %74, 0
  %76 = icmp ne i32 %73, 0
  %or.cond.i.i18 = and i1 %75, %76
  %indvar.next.i.i19 = add i32 %72, 1
  br i1 %or.cond.i.i18, label %udiv32.exit.i.i20, label %udiv32.exit..critedge_crit_edge.i.i25

udiv32.exit..critedge_crit_edge.i.i25:            ; preds = %udiv32.exit.i.i20
  %.lcssa11 = phi i32 [ %73, %udiv32.exit.i.i20 ]
  %.lcssa10 = phi i32 [ %72, %udiv32.exit.i.i20 ]
  %.not.i21 = or i32 %50, -256
  %tmp21.i.i22 = xor i32 %.not.i21, 255
  %tmp25.i.i23 = add i32 %tmp21.i.i22, %49
  %tmp26.i.i24 = sub i32 %tmp25.i.i23, %.lcssa10
  br label %.critedge.i.i29

.critedge.i.i29:                                  ; preds = %udiv32.exit..critedge_crit_edge.i.i25, %udiv32.exit.preheader.i.i16
  %exp.0.lcssa.i.i26 = phi i32 [ %tmp26.i.i24, %udiv32.exit..critedge_crit_edge.i.i25 ], [ %60, %udiv32.exit.preheader.i.i16 ]
  %temp.0.lcssa.i.i27 = phi i32 [ %.lcssa11, %udiv32.exit..critedge_crit_edge.i.i25 ], [ %temp.0.ph.i.i14, %udiv32.exit.preheader.i.i16 ]
  %77 = and i32 %temp.0.lcssa.i.i27, 8388607
  %78 = shl i32 %exp.0.lcssa.i.i26, 23
  %79 = add i32 %78, 1140850688
  %80 = or i32 %77, %59
  %81 = or i32 %80, %79
  %tmp3.i.i28 = bitcast i32 %81 to float
  br label %omega_calc.exit

omega_calc.exit:                                  ; preds = %.critedge.i.i29, %42
  %82 = phi float [ %tmp3.i.i28, %.critedge.i.i29 ], [ 0.000000e+00, %42 ]
  %83 = fadd float %82, %11
  %84 = fmul float %83, 0x3F0A36E2E0000000
  %85 = fadd float %84, %theta_prev.0
  %tmp10.i.i = bitcast float %torque_ref.0 to i32
  %86 = fcmp oeq float %torque_ref.0, 0.000000e+00
  br i1 %86, label %iq_err_calc.exit, label %87

; <label>:87                                      ; preds = %omega_calc.exit
  %88 = lshr i32 %tmp10.i.i, 23
  %89 = and i32 %88, 255
  %90 = lshr i32 %tmp6.i.i2, 23
  %91 = and i32 %90, 255
  %92 = shl i32 %tmp10.i.i, 7
  %93 = and i32 %92, 1073741696
  %94 = or i32 %93, 1073741824
  %95 = lshr i32 %tmp6.i.i2, 7
  %96 = and i32 %95, 65535
  %97 = or i32 %96, 65536
  %98 = xor i32 %tmp10.i.i, %tmp6.i.i2
  %99 = and i32 %98, -2147483648
  %100 = sub i32 %89, %91
  switch i32 %97, label %bb.nph7.i.i.i.preheader [
    i32 0, label %.loopexit.i.i.i
    i32 1, label %udiv32.exit.preheader.i.i
  ]

bb.nph7.i.i.i.preheader:                          ; preds = %87
  br label %bb.nph7.i.i.i

bb.nph7.i.i.i:                                    ; preds = %._crit_edge.i.i.i, %bb.nph7.i.i.i.preheader
  %.016.i.i.i = phi i32 [ %107, %._crit_edge.i.i.i ], [ %94, %bb.nph7.i.i.i.preheader ]
  %quotient.05.i.i.i = phi i32 [ %106, %._crit_edge.i.i.i ], [ 0, %bb.nph7.i.i.i.preheader ]
  %101 = lshr i32 %.016.i.i.i, 1
  %102 = icmp ugt i32 %101, %97
  br i1 %102, label %bb.nph.i.i.i.preheader, label %._crit_edge.i.i.i

bb.nph.i.i.i.preheader:                           ; preds = %bb.nph7.i.i.i
  br label %bb.nph.i.i.i

bb.nph.i.i.i:                                     ; preds = %bb.nph.i.i.i, %bb.nph.i.i.i.preheader
  %shifted_divisor.03.i.i.i = phi i32 [ %103, %bb.nph.i.i.i ], [ %97, %bb.nph.i.i.i.preheader ]
  %curr_quotient.02.i.i.i = phi i32 [ %104, %bb.nph.i.i.i ], [ 1, %bb.nph.i.i.i.preheader ]
  %103 = shl i32 %shifted_divisor.03.i.i.i, 1
  %104 = shl i32 %curr_quotient.02.i.i.i, 1
  %105 = icmp ult i32 %103, %101
  br i1 %105, label %bb.nph.i.i.i, label %._crit_edge.i.i.i.loopexit

._crit_edge.i.i.i.loopexit:                       ; preds = %bb.nph.i.i.i
  %.lcssa8 = phi i32 [ %104, %bb.nph.i.i.i ]
  %.lcssa7 = phi i32 [ %103, %bb.nph.i.i.i ]
  br label %._crit_edge.i.i.i

._crit_edge.i.i.i:                                ; preds = %._crit_edge.i.i.i.loopexit, %bb.nph7.i.i.i
  %shifted_divisor.0.lcssa.i.i.i = phi i32 [ %97, %bb.nph7.i.i.i ], [ %.lcssa7, %._crit_edge.i.i.i.loopexit ]
  %curr_quotient.0.lcssa.i.i.i = phi i32 [ 1, %bb.nph7.i.i.i ], [ %.lcssa8, %._crit_edge.i.i.i.loopexit ]
  %106 = add i32 %curr_quotient.0.lcssa.i.i.i, %quotient.05.i.i.i
  %107 = sub i32 %.016.i.i.i, %shifted_divisor.0.lcssa.i.i.i
  %108 = icmp ult i32 %107, %97
  br i1 %108, label %.loopexit.i.i.i.loopexit, label %bb.nph7.i.i.i

.loopexit.i.i.i.loopexit:                         ; preds = %._crit_edge.i.i.i
  %.lcssa9 = phi i32 [ %106, %._crit_edge.i.i.i ]
  br label %.loopexit.i.i.i

.loopexit.i.i.i:                                  ; preds = %.loopexit.i.i.i.loopexit, %87
  %.0.i.i.i = phi i32 [ -1, %87 ], [ %.lcssa9, %.loopexit.i.i.i.loopexit ]
  br label %udiv32.exit.preheader.i.i

udiv32.exit.preheader.i.i:                        ; preds = %.loopexit.i.i.i, %87
  %temp.0.ph.i.i = phi i32 [ %.0.i.i.i, %.loopexit.i.i.i ], [ %94, %87 ]
  %109 = and i32 %temp.0.ph.i.i, 8388608
  %110 = icmp eq i32 %109, 0
  %111 = icmp ne i32 %temp.0.ph.i.i, 0
  %or.cond11.i.i = and i1 %110, %111
  br i1 %or.cond11.i.i, label %udiv32.exit.i.i.preheader, label %.critedge.i.i

udiv32.exit.i.i.preheader:                        ; preds = %udiv32.exit.preheader.i.i
  br label %udiv32.exit.i.i

udiv32.exit.i.i:                                  ; preds = %udiv32.exit.i.i, %udiv32.exit.i.i.preheader
  %112 = phi i32 [ %indvar.next.i.i, %udiv32.exit.i.i ], [ 0, %udiv32.exit.i.i.preheader ]
  %temp.012.i.i = phi i32 [ %113, %udiv32.exit.i.i ], [ %temp.0.ph.i.i, %udiv32.exit.i.i.preheader ]
  %113 = shl i32 %temp.012.i.i, 1
  %114 = and i32 %113, 8388608
  %115 = icmp eq i32 %114, 0
  %116 = icmp ne i32 %113, 0
  %or.cond.i.i = and i1 %115, %116
  %indvar.next.i.i = add i32 %112, 1
  br i1 %or.cond.i.i, label %udiv32.exit.i.i, label %udiv32.exit..critedge_crit_edge.i.i

udiv32.exit..critedge_crit_edge.i.i:              ; preds = %udiv32.exit.i.i
  %.lcssa6 = phi i32 [ %113, %udiv32.exit.i.i ]
  %.lcssa5 = phi i32 [ %112, %udiv32.exit.i.i ]
  %.not.i = or i32 %90, -256
  %tmp21.i.i = xor i32 %.not.i, 255
  %tmp25.i.i = add i32 %89, %tmp21.i.i
  %tmp26.i.i = sub i32 %tmp25.i.i, %.lcssa5
  br label %.critedge.i.i

.critedge.i.i:                                    ; preds = %udiv32.exit..critedge_crit_edge.i.i, %udiv32.exit.preheader.i.i
  %exp.0.lcssa.i.i = phi i32 [ %tmp26.i.i, %udiv32.exit..critedge_crit_edge.i.i ], [ %100, %udiv32.exit.preheader.i.i ]
  %temp.0.lcssa.i.i = phi i32 [ %.lcssa6, %udiv32.exit..critedge_crit_edge.i.i ], [ %temp.0.ph.i.i, %udiv32.exit.preheader.i.i ]
  %117 = and i32 %temp.0.lcssa.i.i, 8388607
  %118 = shl i32 %exp.0.lcssa.i.i, 23
  %119 = add i32 %118, 1140850688
  %120 = or i32 %117, %99
  %121 = or i32 %120, %119
  %tmp3.i.i = bitcast i32 %121 to float
  br label %iq_err_calc.exit

iq_err_calc.exit:                                 ; preds = %.critedge.i.i, %omega_calc.exit
  %122 = phi float [ %tmp3.i.i, %.critedge.i.i ], [ 0.000000e+00, %omega_calc.exit ]
  %123 = fmul float %44, 0x3F74898F60000000
  %124 = fadd float %123, %flux_rotor_lpf_prev.0
  %125 = fsub float 0x3FD3333340000000, %124
  %126 = fmul float %125, 0x3F0A36E2E0000000
  %127 = fadd float %126, %int_flux_err_temp_2.0
  %128 = fmul float %127, 5.000000e+01
  %129 = fcmp olt float %128, -1.000000e+00
  br i1 %129, label %133, label %130

; <label>:130                                     ; preds = %iq_err_calc.exit
  %131 = fcmp ogt float %128, 1.000000e+00
  br i1 %131, label %133, label %132

; <label>:132                                     ; preds = %130
  br label %133

; <label>:133                                     ; preds = %132, %130, %iq_err_calc.exit
  %int_flux_err.0 = phi float [ %128, %132 ], [ -1.000000e+00, %iq_err_calc.exit ], [ 1.000000e+00, %130 ]
  %134 = fmul float %125, 4.000000e+01
  %135 = fadd float %int_flux_err.0, %134
  %136 = fcmp olt float %135, -2.000000e+00
  br i1 %136, label %.thread, label %137

; <label>:137                                     ; preds = %133
  %138 = fcmp ogt float %135, 2.000000e+00
  br i1 %138, label %.thread, label %139

; <label>:139                                     ; preds = %137
  %140 = fcmp oeq float %135, 0.000000e+00
  br i1 %140, label %fdiv32.exit, label %.thread

.thread:                                          ; preds = %139, %137, %133
  %tmp10.i35.in = phi float [ %135, %139 ], [ -2.000000e+00, %133 ], [ 2.000000e+00, %137 ]
  %tmp10.i35 = bitcast float %tmp10.i35.in to i32
  %141 = shl i32 %tmp10.i35, 7
  %142 = and i32 %141, 1073741696
  %143 = or i32 %142, 1073741824
  br label %bb.nph7.i.i

bb.nph7.i.i:                                      ; preds = %._crit_edge.i.i, %.thread
  %.016.i.i = phi i32 [ %150, %._crit_edge.i.i ], [ %143, %.thread ]
  %quotient.05.i.i = phi i32 [ %149, %._crit_edge.i.i ], [ 0, %.thread ]
  %144 = lshr i32 %.016.i.i, 1
  %145 = icmp ugt i32 %144, 106115
  br i1 %145, label %bb.nph.i.i.preheader, label %._crit_edge.i.i

bb.nph.i.i.preheader:                             ; preds = %bb.nph7.i.i
  br label %bb.nph.i.i

bb.nph.i.i:                                       ; preds = %bb.nph.i.i, %bb.nph.i.i.preheader
  %shifted_divisor.03.i.i = phi i32 [ %146, %bb.nph.i.i ], [ 106115, %bb.nph.i.i.preheader ]
  %curr_quotient.02.i.i = phi i32 [ %147, %bb.nph.i.i ], [ 1, %bb.nph.i.i.preheader ]
  %146 = shl i32 %shifted_divisor.03.i.i, 1
  %147 = shl i32 %curr_quotient.02.i.i, 1
  %148 = icmp ult i32 %146, %144
  br i1 %148, label %bb.nph.i.i, label %._crit_edge.i.i.loopexit

._crit_edge.i.i.loopexit:                         ; preds = %bb.nph.i.i
  %.lcssa3 = phi i32 [ %147, %bb.nph.i.i ]
  %.lcssa2 = phi i32 [ %146, %bb.nph.i.i ]
  br label %._crit_edge.i.i

._crit_edge.i.i:                                  ; preds = %._crit_edge.i.i.loopexit, %bb.nph7.i.i
  %shifted_divisor.0.lcssa.i.i = phi i32 [ 106115, %bb.nph7.i.i ], [ %.lcssa2, %._crit_edge.i.i.loopexit ]
  %curr_quotient.0.lcssa.i.i = phi i32 [ 1, %bb.nph7.i.i ], [ %.lcssa3, %._crit_edge.i.i.loopexit ]
  %149 = add i32 %curr_quotient.0.lcssa.i.i, %quotient.05.i.i
  %150 = sub i32 %.016.i.i, %shifted_divisor.0.lcssa.i.i
  %151 = icmp ult i32 %150, 106115
  br i1 %151, label %udiv32.exit.preheader.i, label %bb.nph7.i.i

udiv32.exit.preheader.i:                          ; preds = %._crit_edge.i.i
  %.lcssa4 = phi i32 [ %149, %._crit_edge.i.i ]
  %152 = lshr i32 %tmp10.i35, 23
  %153 = and i32 %tmp10.i35, -2147483648
  %154 = and i32 %152, 255
  %155 = add i32 %154, -126
  %156 = and i32 %.lcssa4, 8388608
  %157 = icmp eq i32 %156, 0
  %158 = icmp ne i32 %.lcssa4, 0
  %or.cond11.i = and i1 %157, %158
  br i1 %or.cond11.i, label %udiv32.exit.i.preheader, label %.critedge.i

udiv32.exit.i.preheader:                          ; preds = %udiv32.exit.preheader.i
  br label %udiv32.exit.i

udiv32.exit.i:                                    ; preds = %udiv32.exit.i, %udiv32.exit.i.preheader
  %159 = phi i32 [ %indvar.next.i, %udiv32.exit.i ], [ 0, %udiv32.exit.i.preheader ]
  %temp.012.i = phi i32 [ %160, %udiv32.exit.i ], [ %.lcssa4, %udiv32.exit.i.preheader ]
  %160 = shl i32 %temp.012.i, 1
  %161 = and i32 %160, 8388608
  %162 = icmp eq i32 %161, 0
  %163 = icmp ne i32 %160, 0
  %or.cond.i = and i1 %162, %163
  %indvar.next.i = add i32 %159, 1
  br i1 %or.cond.i, label %udiv32.exit.i, label %udiv32.exit..critedge_crit_edge.i

udiv32.exit..critedge_crit_edge.i:                ; preds = %udiv32.exit.i
  %.lcssa1 = phi i32 [ %160, %udiv32.exit.i ]
  %.lcssa = phi i32 [ %159, %udiv32.exit.i ]
  %tmp25.i = add i32 %154, -127
  %tmp26.i = sub i32 %tmp25.i, %.lcssa
  br label %.critedge.i

.critedge.i:                                      ; preds = %udiv32.exit..critedge_crit_edge.i, %udiv32.exit.preheader.i
  %exp.0.lcssa.i = phi i32 [ %tmp26.i, %udiv32.exit..critedge_crit_edge.i ], [ %155, %udiv32.exit.preheader.i ]
  %temp.0.lcssa.i = phi i32 [ %.lcssa1, %udiv32.exit..critedge_crit_edge.i ], [ %.lcssa4, %udiv32.exit.preheader.i ]
  %164 = and i32 %temp.0.lcssa.i, 8388607
  %165 = shl i32 %exp.0.lcssa.i, 23
  %166 = add i32 %165, 1140850688
  %167 = or i32 %166, %153
  %168 = or i32 %167, %164
  %tmp3.i = bitcast i32 %168 to float
  br label %fdiv32.exit

fdiv32.exit:                                      ; preds = %.critedge.i, %139
  %169 = phi float [ %tmp3.i, %.critedge.i ], [ 0.000000e+00, %139 ]
  %170 = getelementptr [9 x i8]* @.str1, i64 0, i64 0
  tail call void @write_float32(i8* %170, float %169) nounwind
  %171 = getelementptr [9 x i8]* @.str1, i64 0, i64 0
  tail call void @write_float32(i8* %171, float %122) nounwind
  %172 = getelementptr [9 x i8]* @.str1, i64 0, i64 0
  tail call void @write_float32(i8* %172, float %85) nounwind
  %173 = getelementptr [9 x i8]* @.str1, i64 0, i64 0
  tail call void @write_float32(i8* %173, float %44) nounwind
  %phitmp = fmul float %25, 0x3FD3333340000000
  %phitmp31 = fmul float %44, 0x3FEFFC1160000000
  %phitmp33 = fmul float %124, 0x3FEFD6ECE0000000
  br label %1
}

declare float @read_float32(i8*)

declare void @write_float32(i8*, float)
